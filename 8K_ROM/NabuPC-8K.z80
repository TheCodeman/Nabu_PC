; z80dasm 1.1.5
; command line: z80dasm -t -a -g0x00 --labels -b NabuPC-8K.txt -o NabuPC-8K.z80 NabuPC-2764.bin
; disassembled by Ken Segler 
; https://github.com/TheCodeman/Nabu_PC
; assemble with linux z80asm
; z80asm --list=nabupc-8k.lst  NabuPC-8K.z80  -o nabu-8k.bin
; last two bytes of 8k file are checksum
; simple c code to generate it
;
; #include <stdio.h>
; #include <stdint.h>
; int main(void) {
; FILE *fp;
; uint16_t check=0;
; uint16_t index=0;
; uint8_t c=0;
; fp=fopen("nabu-8k.bin","rb+");
; if(fp!=NULL) {
; printf("starting\n\r");
; for(index=0;index<8190;index++){
; fread(&c, 1,1, fp);
; check+=c;
; }
; printf("value %04x\n\r",check);
; c=check&0x00ff;
; fwrite(&c, 1, 1, fp)
; c=(check>>8);
; fwrite(&c, 1, 1, fp);
; fclose(fp);
; }
; }
;
;
;
vdp_data:	equ	0a0h
vdp_add:	equ	0a1h
hcca:		equ	080h
ctrl_reg:	equ	000h
kbd_data:	equ	090h
kbd_status:	equ	091h
sg_data:	equ 040h
sg_add:		equ	041h

ctrl_reg_save: equ 0ffedh

	org	00000h

l0000h:
	jp l000ah		                
	rlca			                
l0004h:
	ld (08137h),a		            
	ld a,(bc)			            
	add hl,bc			            
l0009h:
	rrca			                
l000ah:
	ld a,002h		                
	ld (ctrl_reg_save),a		            
l000fh:
	out (ctrl_reg),a		            
	ld sp,0fee0h		            
	call init_vdp		            
	call init_sg		            
	call init_kbd		            
	call sub_0252h		  ;clear screen ?          
	ld bc,(0fffeh)		            
	ld a,c			                
	sub 0a5h		                
	jr nz,l0034h		            
	ld a,b			                
	sub 05ah		                
	jr nz,l0034h		            
	call copy_rom_to_ram_disable_rom		            
	jp l00b7h		 	;jump to ram               
l0034h:
	ex af,af'			            
	xor a			                
	ex af,af'			            
	call sub_0215h		            
	ld a,(0fee1h)		            
	ld d,a			                
	ld a,(0fee2h)		            
	ld e,a			                
	xor a			                
	or d			                
	jr nz,l0050h		            
	or e			                
	jr nz,l0050h		            
	ld a,055h		                
	ld (0ffech),a		            
	jr l005ah		                
l0050h:
	ld a,0aah		                
	ld (0ffech),a		            
	ld a,001h		                
	ld (0ffe9h),a		            
l005ah:
	ld a,0a5h		                
	ld (0fffeh),a		            
	ld a,05ah		                
	ld (0ffffh),a		            
	call 01126h		                
	call copy_rom_to_ram_disable_rom		            
l006ah:
	ld a,(0fee0h)		            
	ld b,a			                
	ld a,(0fee1h)		            
	ld d,a			                
	ld a,(0fee2h)		            
	ld e,a			                
	xor a			                
	add a,b			                
	add a,d			                
	add a,e			                
	cp 001h		                
	jr z,l009ah		                
	jp p,l00a6h		                
	ld hl,adaptor_floppy_fail_txt	
	call print_string		            
	ex af,af'			            
	inc a			                
	cp 003h		                
	jr nz,l0094h		            
	ld hl,something_wrong		        
	call print_string		            
	halt			                
l0094h:
	ex af,af'			            
	call sub_0215h		            
	jr l006ah		                
l009ah:
	xor a			                
	ld (0ffe9h),a		            
	or b			                
	jr nz,l00d9h		            
	or d			                
	jr nz,l00f1h		            
	jr l00c2h		                
l00a6h:
	xor a			                
	ld c,a			                
	or b			                
	jr z,l00aeh		                
	set 0,c		                
	xor a			                
l00aeh:
	or d			                
	jr z,l00b4h		                
	set 1,c		                
	xor a			                
l00b4h:
	call l03e7h
;
;
;
; entry after copy rom to ram and disable rom		        
l00b7h:
	ld a,(0ffech)		            
	cp 055h		                
	jr z,l00d9h		                
	cp 0aah		                
sub_00c0h:
	jr z,l00f1h		                
l00c2h:
	ld hl,boot_error_txt
	call print_string		            
l00c8h:
	ld bc,0ffffh		            
l00cbh:
	push ix		                
	pop ix		                
	djnz l00cbh		                
	dec c			                
	ld b,0ffh		                
	jr nz,l00cbh		            
	jp l006ah		                
l00d9h:
	ld hl,loading_from_cable_txt		        
	call print_string		            
	call sub_047ah		            
	ld hl,please_wait_txt	        
	call print_string		            
	call sub_0826h		            
	or a			                
	jr nz,l00d9h		            
	jp 0240fh		                
l00f1h:
	ld a,(0ffe9h)		            
	or a			                
	jr nz,l0117h		            
	ld bc,l02e6h		            
	ld de,l00d9h		            
	call print_vdp		        
	ld hl,insert_system_disk_txt		        
	call print_string		            
l0106h:
	in a,(kbd_status)		                
	bit 1,a		                
	jr z,l0106h		                
	in a,(kbd_data)		                
	cp 00dh		                
	jr nz,l0106h		            
	ld a,000h		                
	ld (0ffe9h),a		            
l0117h:
	ld bc,l02e6h		            
	ld de,l00d9h		            
	call print_vdp		        
	ld hl,loading_from_floppy_txt		        
	call print_string		            
	call sub_0930h		        
	jp l00c2h		                

; BLOCK 'text_1' (start 0x012c end 0
adaptor_floppy_fail_txt:
	defb 01eh		                
	defb 05dh		                
	defb 002h		                
	defm	"ADAPTOR OR FLOPPY DISK FAILURE"
;text_1_end:

; BLOCK 'text_2' (start 0x014d end 0x015b)
boot_error_txt:
	defb 00bh		                
	defb 04ah		                
	defb 003h		                
	defm	" BOOT ERROR"


; BLOCK 'text_3' (start 0x015b end 0x0169)
please_wait_txt:
	defb 00bh		                
	defb 022h		                
	defb 003h		                
	defm	"PLEASE WAI"
l0168h:
	defb 054h		                
;text_3_end:

; BLOCK 'text_4' (start 0x0169 end 0x017e)
loading_from_cable_txt:
	defb 012h		                
	defb 0d2h		                
	defb 002h		                
	defm 	"LOADING FROM CABLE"
;text_4_end:

; BLOCK 'text_5' (start 0x017e end 0x01c0)
loading_from_floppy_txt:
	defb 03fh		                
	defb 0d2h		                
	defb 002h		                
	defm	"LOADING FROM FLOPPY DISK                                       "
;text_5_end:

; BLOCK 'text_6' (start 0x01c0 end 0x0202)
insert_system_disk_txt:
	defb 03fh		                
	defb 0d2h		                
	defb 002h		                
	defm	"   INSERT SYSTEM DISK IN DRIVE A                   AND PRESS GO"
;
;
;
;copy rom to ram and disable rom ?
copy_rom_to_ram_disable_rom:
	ld hl,l0000h		      
	ld de,l0000h		      
	ld bc,02000h		      
	ldir		              
	ld a,(ctrl_reg_save)		      
	set 0,a		              
	out (ctrl_reg),a		      
	ret		
;
;
;
;		              
sub_0215h:
	xor a			          
	ld (0fee1h),a		      
	ld (0fee2h),a		      
	call sub_08c0h		      
	ld b,a			          
	ld a,001h		          
l0222h:
	srl b		              
	jr nc,l0229h		      
	ld (0fee1h),a		      
l0229h:
	ld bc,0ffffh		      
	ld (0ffeah),bc		      
	call sub_08aeh		      
	ld (0fee0h),a		      
	ret	

;
;
;
;			              
init_vdp:
	ld hl,vdp_init_data
	ld b,008h		          
	ld c,0a1h		          
l023eh:
	outi		              
	ld a,b			          
	or 080h		              
	out (vdp_add),a		      
	and 07fh		          
	jr nz,l023eh		      
	ret	
;
;
;
;			              
vdp_init_data:
	defb	0f5h 	 
	defb	000h 	 
	defb 	000h 	
	defb	004h 	 
	defb	000h 	 
	defb	000h  
	defb	0d0h 
	defb	000h  
;
;
;
;copy 1160 bytes to vdp
sub_0252h:
	xor a			          
	out (vdp_add),a		      
	ld a,061h		          
	out (vdp_add),a		      
	ld c,0a0h		          
	ld d,091h		          
	ld hl,l0a81h		      
l0260h:
	ld b,008h		          ;8 bytes*91h 1160 bytes
	otir		              
	dec d			          
	jr nz,l0260h		      
	xor a			          
	out (vdp_add),a		      
	ld a,040h		          
	out (vdp_add),a		      
	ld a,020h		          
	ld hl,0fc40h		      
	ld de,l0000h+1		      
l0276h:
	out (vdp_data),a		      
	add hl,de			      
	jr nc,l0276h		      
	ld b,007h		          
	ld hl,l0290h		      
	ld de,l000fh		      
l0283h:
	push bc			          
	push hl			          
	push de			          
	call print_string		      
	pop de			          
	pop hl			          
	pop bc			          
	add hl,de			      
	djnz l0283h		          
	ret	

; NABU Logo
l0290h:
	defb	00Ch,00Dh,000h,07Eh,0A9h,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,0AAh,080h,00Ch
	defb	035h,000h,0ABh,081h,081h,081h,081h,081h
l02a8h:	
	defb	081h,081h,081h,081h,081h,0ACh,00Ch,05Dh,000h,082h,083h,084h,085h,086h,087h,088h
	defb    089h,08Ah,08Bh,08Ch,08Dh,00Ch,085h,000h,08Eh,08Fh,090h,091h,092h,093h,094h
l02c7h:
	defb	095h,096h,097h,098h,099h,00Ch,0ADh,000h,09Ah
	defb	09Bh,09Ch,09Dh,09Eh,09Fh,0A0h,0A1h,0A2h,0A3h,0A4h,0A5h,00Ch,0D5h,000h,0ADh,0A6h
	defb	0A6h,0A6h,0A6h,0A6h,0A6h,0A6h
l02e6h:	
	defb	0A6h,0A6h,0A6h,0AEh,00Ch,0FDh,000h,0A7h,0AFh,0A8h
	defb	0A8h,0A8h,0A8h,0A8h,0A8h,0A8h,0A8h,0B0h,0A7h
l02f9h:
	defb	000h,000h,000h,000h,000h,040h,04Eh,004h

init_kbd:
	ld hl,l02f9h		      
	ld b,008h		          
l0306h:
	ld a,(hl)			      
	out (kbd_status),a		      
	push bc			          
	pop bc			          
	inc hl			          
	djnz l0306h		          
	ret		
;
;
;
;		              
init_sg:
	ld b,004h		          
	ld hl,l031fh		      
l0314h:
	ld a,(hl)			      
	out (sg_add),a		      
	inc hl			          
	ld a,(hl)			      
	out (sg_data),a		      
	inc hl			          
	djnz l0314h		          
	ret		

l031fh:
	defb	007h 	 
	defb	07fh 	 
	defb	008h 	 
	defb	000h 	 
	defb	009h 	 
	defb	000h 	 
	defb	00ah 	 
	defb	000h 
;
;
;
;		 	              
sub_0327h:
	ld a,007h		          
	out (sg_add),a		      
	ld a,07eh		          
	out (sg_data),a		      
	ld a,008h		          
	out (sg_add),a		      
	ld a,006h		          
	out (sg_data),a		      
	ld a,001h		          
	out (sg_add),a		      
	dec a			          
	out (sg_data),a		      
	ret			              
;
;
;
;
print_string:
	ld b,(hl)			      
	inc hl			          
	ld a,(hl)			      
	out (vdp_add),a		      
	inc hl			          
	ld a,(hl)			      
	add a,040h		          
	out (vdp_add),a		      
	inc hl			          
	ld c,0a0h		          
	otir		              
	ret			              
;
;
;
;	
print_vdp:
	ld a,c			          
	out (vdp_add),a		      
	ld a,b			          
	add a,040h		          
	out (vdp_add),a		      
l0358h:
	ld a,020h		          
	out (vdp_data),a		      
	dec de			          
	ld a,d			          
	or e			          
	jr nz,l0358h		      
	ret			              

; BLOCK 'text_7' (start 0x0362 end 0x0385)
select_loading_device_txt:
	defb 020h		                
	defb 035h		                
	defb 002h		                
	defm 	"PLEASE SELECT THE LOADING DEVICE"
text_7_end:

; BLOCK 'text_8' (start 0x0385 end 0x0390)
select_cable_txt:
	defb 008h		                
	defb 088h		                
	defb 002h		                
	defm	"1. CABLE"
text_8_end:

; BLOCK 'text_9' (start 0x0390 end 0x03a1)
select_floppy_txt:
	defb 00eh		                
	defb 0d8h		                
	defb 002h		                
	defm	"2. FLOPPY DISK"
text_9_end:

; BLOCK 'text_10' (start 0x03a1 end 0x03b0)
press_1_or_2_txt:
	defb 00ch		                
	defb 025h		                
	defb 003h		                
	defm 	"PRESS 1 OR 2"

l03b0h:
	defb	062h
	defb	003h
	defb	085h
	defb	003h
	defb	090h
	defb	003h
	defb	0a1h
	defb	003h
l03b8h:
	defb	062h
	defb	003h
	defb	090h
	defb	003h
	defb	0a1h
	defb	003h
l03beh:
	defb	062h
	defb	003h
	defb	085h
	defb	003h
	defb	0a1h
	defb	003h
	defb	062h
	defb	003h
	defb	085h
	defb	003h
	defb	090h
	defb	003h
		                

; BLOCK 'text_11' (start 0x03ca end 0x03e7)
invalid_option:
	defb 01ah		                
	defb 075h		                
	defb 003h		                
	defm	"INVALID OPTION,  TRY AGAIN"

l03e7h:
	push bc			                
	ld bc,00235h		            
	ld de,adaptor_floppy_fail_txt	
	call print_vdp		        
	pop bc			                
	push bc			                
	srl c		                
	jr c,l03ffh		                
	ld b,003h		                
	ld ix,l03b8h		            
	jr l0411h		                
l03ffh:
	srl c		                
	jr c,l040bh		                
	ld b,003h		                
	ld ix,l03beh		            
	jr l0411h		                
l040bh:
	ld b,004h		                
	ld ix,l03b0h		        
l0411h:
	push bc			                
	ld l,(ix+000h)		            
	ld h,(ix+001h)		            
	call print_string		            
	pop bc			                
	inc ix		                
	inc ix		                
	djnz l0411h		                
l0422h:
	pop bc			                
	push bc			                
	in a,(kbd_status)		                
	and 002h		                
	jr z,l0422h		                
	in a,(kbd_data)		                
	srl c		                
	jr nc,l043bh		            
	cp 031h		                
	jr nz,l043bh		            
	ld a,055h		                
	ld (0ffech),a		            
	jr l045ah		                
l043bh:
	srl c		                
	jr nc,l044ah		            
	cp 032h		                
	jr nz,l044ah		            
	ld a,0aah		                
	ld (0ffech),a		            
	jr l045ah		                
l044ah:
	cp 0a0h		                
	jr nc,l0452h		            
	bit 7,a		                
	jr nz,l0422h		            
l0452h:
	ld hl,invalid_option		        
	call print_string		            
	jr l0422h		                
l045ah:
	pop bc			                
	ld a,000h		                
	ld (0ffe9h),a		            
	ld bc,00235h		            
	ld de,l0168h		            
	call print_vdp		        
	ret			                
	ld a,00eh		                
	out (sg_add),a		            
	ld a,c			                
	out (sg_data),a		            
	ld a,00fh		                
	out (sg_add),a		            
	in a,(sg_data)		                
	bit 0,a		                
	ret			                
sub_047ah:
	call sub_05ebh		            
	jr z,l0482h		                
	jp l052eh		                
l0482h:
	call sub_0627h		            
	ld (0fff8h),a		            
	jr z,l048dh		                
	jp l052eh		                
l048dh:
	ld hl,0fff8h		            
	bit 7,(hl)		                
	jr nz,l0497h		            
	jp l051bh		                
l0497h:
	ld hl,type_chanel_code
	call print_string		            
l049dh:
	ld hl,0fff9h		            
	ld de,l02c7h		            
	call l07b4h	        
	ld hl,0fff9h		            
	xor a			                
	ld c,a			                
	ld b,004h		                
l04adh:
	ld a,(hl)			            
	bit 0,b		                
	jr z,l04bbh		                
	sla a		                
	bit 4,a		                
	jr z,l04bbh		                
	res 4,a		                
	inc a			                
l04bbh:
	add a,c			                
	ld c,a			                
	inc hl			                
	djnz l04adh		                
	and 00fh		                
	cp (hl)			                
	jr z,l04d5h		                
	ld hl,retype_chanel_code		        
	call print_string		            
	ld c,090h		                
	ld de,0e000h		            
	call sub_05c4h		        
	jr l049dh		                
l04d5h:
	ld hl,0fff9h		            
	ld b,004h		                
	ld de,l0000h		            
l04ddh:
	ld a,(hl)			            
	sla e		                
	rl d		                
	sla e		                
	rl d		                
	sla e		                
	rl d		                
	sla e		                
	rl d		                
	add a,e			                
	ld e,a			                
	inc hl			                
	djnz l04ddh		                
	push de			                
	ld c,085h		                
	call sub_0645h		            
	jr z,l0503h		                
l04fbh:
	ld a,005h		                
	ld (0fffeh),a		            
	jp l0000h		                
l0503h:
	pop de			                
	push de			                
	ld c,d			                
	call sub_0655h		            
	pop de			                
	jr z,l050eh		                
	jr l04fbh		                
l050eh:
	ld c,e			                
	call sub_0655h		            
	jr nz,l04fbh		            
	ld c,0e4h		                
	call sub_0667h		            
	jr nz,l04fbh		            
l051bh:
	ld bc,l02a8h		            
	ld de,00028h		            
	call print_vdp		        
	ld hl,loading_from_cable_txt		        
	call print_string		            
	call sub_060fh		            
	ret z			                
l052eh:
	ld bc,00258h		               
	ld de,l00c8h		               
	call print_vdp		           
	ld hl,adapter_fail		           
	call print_string		               
	jp sub_047ah		               

; BLOCK 'text_12' (start 0x0540 end 0x0
adapter_fail:
	defb 00fh		                
	defb 08ch		                
	defb 002h		                
	defm	"ADAPTOR FAILURE"

; BLOCK 'text_13' (start 0x0552 end 0x059f)
type_chanel_code:
	defb 049h		                
	defb 0abh		                
	defb 002h		                
	defm	"PLEASE TYPE IN CHANNEL CODE                                               "


; BLOCK 'text_14' (start 0x059f end 0x05c4)
retype_chanel_code:
	defb 021h		                
	defb 0abh		                
	defb 002h		                
	defm	"RE-TYPE CHANNEL CODE              "
	
sub_05c4h:
	push af			                
	push hl			                
	push bc			                
	push de			                
	call sub_0327h		            
	xor a			                
	out (sg_add),a		            
	ld a,c			                
	out (sg_data),a		            
	ld hl,l0000h+1		            
	ld b,004h		                
	ex de,hl			            
l05d7h:
	add hl,de			            
	jr nc,l05d7h		            
	pop hl			                
	push hl			                
	djnz l05d7h		                
	ld a,007h		                
	out (sg_add),a		            
	ld a,07fh		                
	out (sg_data),a		            
	pop de			                
	pop bc			                
	pop hl			                
	pop af			                
	ret	
;
;
;
;			                	
sub_05ebh:
	in a,(hcca)		                
	ld b,004h		                
l05efh:
	ld c,083h		                
	call sub_0655h		            
	jr nz,l060ah		            
	ld c,010h		                
	call sub_0667h		            
	jr nz,l060ah		            
	ld c,006h		                
	call sub_0667h		            
	jr nz,l060ah		            
	ld c,0e4h		                
	call sub_0667h		            
	ret z			                
l060ah:
	dec b			                
	jr nz,l05efh		            
	dec b			                
	ret		
;
;
;
;		                	
sub_060fh:
	ld c,081h		                
	call sub_0645h		            
	ret nz			                
	ld c,08fh		                
	call sub_0655h		            
	ret nz			                
	ld c,005h		                
	call sub_0655h		            
	ret nz			                
	ld c,0e4h		                
	call sub_0667h		            
	ret		
;
;
;
;	                	
sub_0627h:
	ld c,082h		                
	call sub_0645h		            
	ret nz			                
	ld c,001h		                
	call sub_0655h		            
	ret nz			                
	call sub_0675h		            
	ret nz			                
	ld b,a			                
	ld c,010h		                
	call sub_0667h		            
	ret nz			                
	ld c,0e1h		                
	call sub_0667h		            
	ld a,b			                
	ret			                	
;
;
;
;
sub_0645h:
	call sub_0655h		            
	ret nz			                
	ld c,010h		                
	call sub_0667h		            
	ret nz			                
	ld c,006h		                
	call sub_0667h		            
	ret			                	
;
;
;
;
sub_0655h:
	ld de,(0ffeah)		            
l0659h:
	call sub_08d9h		            
	ret nz			                
	call sub_0697h		            
	jr z,l0659h		                
	ld a,c			                
	out (hcca),a		            
	xor a			                
	ret			
;
;
;
;	                	
sub_0667h:
	ld de,(0ffeah)		            
l066bh:
	call sub_08d9h		            
	ret nz			                
	in a,(hcca)		                
	cp c			                
	jr nz,l066bh		            
	ret		
;
;
;
;		                	
sub_0675h:
	ld de,(0ffeah)		            
l0679h:
	call sub_08d9h		            
	ret nz			                
	call sub_0686h		            
	jr z,l0679h		                
	in a,(hcca)		                
	cp a			                
	ret			                	
;
;
;
;
sub_0686h:
	ld a,00eh		                
	out (sg_add),a		            
	ld a,080h		                
	out (sg_data),a		            
	ld a,00fh		                
	out (sg_add),a		            
	in a,(sg_data)		                
	bit 0,a		                	
	ret			                	
;
;
;
;
sub_0697h:
	ld a,00eh		                
	out (sg_add),a		            
	ld a,040h		                
	out (sg_data),a		            
	ld a,00fh		                
	out (sg_add),a		            
	in a,(sg_data)		                
	bit 0,a		                	
	ret			                	
;
;
;
;
l06a8h:
	exx			                	
	xor a			                
	dec a			                
	ld d,a			                
	ld e,a			                
	exx			                	
	ld c,084h		                
	call sub_0645h		            
	ret nz			                
	ld b,004h		                
	ld hl,02003h		            
l06b9h:
	call sub_0697h		            
	jr z,l06b9h		                
	ld a,(hl)			            
	out (hcca),a		            
	dec l			                
	djnz l06b9h		                
	ld c,0e4h		                
	call sub_0667h		            
	ret nz			                
	ld b,018h		                
	ld de,l0000h+1		            
	ld hl,l0000h		            
l06d2h:
	add hl,de			            
	jr nc,l06deh		            
	djnz l06deh		                
	ld hl,something_wrong		        
	call print_string		            
	halt			                
l06deh:
	call sub_0686h		            
	jr z,l06d2h		                
	in a,(hcca)		                
	cp 091h		                	
	jr z,l06f5h		                
	cp 090h		                	
	ret nz			                
	ld hl,adapter_not_auth		        
	call print_string		            
	jp l06a8h		                
l06f5h:
	ld a,010h		                
	out (hcca),a		            
l06f9h:
	call sub_0697h		            
	jr z,l06f9h		                
	call sub_0686h		            
	ld hl,(02004h)		            
	ld bc,l0000h		            
	res 0,e		                	
	ld a,006h		                
	out (hcca),a		            
l070dh:
	push de			                
	ld de,0ffffh		            
l0711h:
	ld a,00fh		                
	out (sg_add),a		            
	in a,(sg_data)		                
	bit 0,a		                	
	jr nz,l0722h		            
	call sub_08d9h		            
	jr nz,l075fh		            
	jr l0711h		                
l0722h:
	pop de			                
	in a,(hcca)		                
	cp 010h		                	
	jr nz,l073bh		            
	bit 0,e		                	
	jr z,l0737h		                
	res 0,e		                	
	ld (hl),a			            
	call sub_0f09h		            
	inc hl			                
	inc bc			                
	jr l070dh		                
l0737h:
	set 0,e		                	
	jr l070dh		                
l073bh:
	bit 0,e		                	
	jr nz,l0747h		            
	ld (hl),a			            
	call sub_0f09h		            
	inc hl			                
	inc bc			                
	jr l070dh		                
l0747h:
	ld (02006h),bc		            
	cp 0e1h		                	
	jp nz,l06a8h		            
	exx			                	
	ld a,e			                
	cp 00fh		                	
	jp nz,l06a8h		            
	ld a,d			                
	cp 01dh		                	
	jp nz,l06a8h		            
	xor a			                
	ret			                	
l075fh:
	pop de			                
	pop de			                
	xor a			                
	dec a			                
	ret			                	

; BLOCK 'text_15' (start 0x0764 end 0x079b)
something_wrong:
	defb 034h		                ;;0764	34 	4 
	defb 022h		                ;;0765	22 	" 
	defb 003h		                ;;0766	03 	. 
	defm	"SEE \"IF SOMETHING GOES WRONG\" IN        OWNERS GUIDE"


; BLOCK 'text_16' (start 0x079b end 0x07b4)
adapter_not_auth:
	defb 016h		                ;;079b	16 	. 
	defb 011h		                ;;079c	11 	. 
	defb 002h		                ;;079d	02 	. 
	defm	"ADAPTOR NOT AUTHORIZED"
;
;
;
;	
l07b4h:
	ld b,005h		         
l07b6h:
	in a,(kbd_status)		         
	bit 1,a		             
	jr z,l07b6h		         
	in a,(kbd_data)		         
	push af			         
	sub 030h		         
	jr c,l07fah		         
	cp 00ah		             
	jr c,l07dbh		         
	sub 007h		         
	cp 00ah		             
	jr c,l07fah		         
	cp 010h		             
	jr c,l07dbh		         
	sub 020h		         
	cp 00ah		             
	jr c,l07fah		         
	cp 010h		             
	jr nc,l07fah		     
l07dbh:
	ld c,a			         
	ld a,b			         
	or a			         
	jr nz,l07e3h		     
	pop af			         
	jr l07b6h		         
l07e3h:
	ld a,e			         
	out (vdp_add),a		     
	ld a,d			         
	or 040h		             
	out (vdp_add),a		     
	pop af			         
	cp 05bh		             
	jr c,l07f2h		         
	sub 020h		         
l07f2h:
	out (vdp_data),a		     
	ld (hl),c			     
	inc hl			         
	inc de			         
	dec b			         
	jr l07b6h		         
l07fah:
	pop af			         
	cp 00dh		             
	jr z,l0803h		         
	cp 0e7h		             
	jr nz,l0808h		     
l0803h:
	ld a,b			         
	or a			         
	jr nz,l07b6h		     
	ret			             
l0808h:
	cp 07fh		             
	jr z,l0810h		         
	cp 0e1h		             
	jr nz,l07b6h		     
l0810h:
	ld a,b			         
	cp 005h		             
	jr z,l07b6h		         
	dec de			         
	dec hl			         
	inc b			         
	ld a,e			         
	out (vdp_add),a		     
	ld a,d			         
	or 048h		             
	out (vdp_add),a		     
	ld a,020h		         
	out (vdp_data),a		     
	jr l07b6h		         
sub_0826h:
	xor a			         
	ld (02000h),a		     
	ld (02001h),a		     
	ld (02003h),a		     
	inc a			         
	ld (02002h),a		     
	ld bc,0200bh		     
	ld (02004h),bc		     
	ld bc,0240dh		     
	ld (02008h),bc		     
	xor a			         
	ld (0240bh),a		     
	ld (0240ch),a		     
	xor a			         
	out (sg_add),a		     
	out (sg_data),a		     
	call sub_0327h		     
l0851h:
	call l06a8h		         
	or a			         
	jr z,l085eh		         
	cp 003h		             
	jr z,sub_0826h		     
	ld a,0ffh		         
	ret			             
l085eh:
	xor a			         
	out (sg_add),a		     
	ld a,(02003h)		     
	sla a		             
	sla a		             
	cpl			             
	out (sg_data),a		     
	ld hl,(02004h)		     
	ld bc,l000ah+1		     
	add hl,bc			     
	ld a,(hl)			     
	ld (0200ah),a		     
	ld hl,(02006h)		     
	ld bc,0ffeeh		     
	add hl,bc			     
	push hl			         
	pop bc			         
	ld hl,(0240bh)		     
	add hl,bc			     
	ld (0240bh),hl		     
	ld hl,(02004h)		     
	ld de,l000fh+1		     
	add hl,de			     
	ld de,(02008h)		     
	ldir		             
	ld (02008h),de		     
	ld a,(0200ah)		     
	bit 4,a		             
	jr nz,l08a4h		     
	ld hl,02003h		     
	inc (hl)			     
	jr l0851h		         
l08a4h:
	ld a,007h		         
	out (sg_add),a		     
	ld a,07fh		         
	out (sg_data),a		     
	xor a			         
	ret			             
sub_08aeh:
	call sub_05ebh		     
	jr nz,l08beh		     
	call sub_0627h		     
	ld (0fff8h),a		     
	jr nz,l08beh		     
	ld a,001h		         
	ret			             
l08beh:
	xor a			         
	ret			             
sub_08c0h:
	ld de,l0000h		     
	ld c,0cfh		         
	ld b,004h		         
l08c7h:
	in a,(c)		         
	cp 010h		             
	jr nz,l08cfh		     
	ld d,001h		         
l08cfh:
	ld a,c			         
	add a,010h		         
	ld c,a			         
	djnz l08c7h		         
	xor a			         
	add a,d			         
	add a,e			         
	ret			             
sub_08d9h:
	dec de			         
	ld a,d			         
	or e			         
	jr z,l08e0h		         
	xor a			         
	dec a			         
l08e0h:
	inc a			         
	ret			             

; BLOCK 'text_17' (start 0x08e2 end 0x0909)
load_error:
	defb 024h		               
	defb 072h		               
	defb 003h		               
	defm	"LOAD ERROR-   RESET NPC             "


; BLOCK 'text_18' (start 0x0909 end 0x0930)
disk_no_system:
	defb 024h		               
	defb 09ah		               
	defb 003h		               
	defm	"DISK DOES NOT CONTAIN A SYSTEM TRACK"
;
;
;
;	
sub_0930h:
	di			                
	call sub_09b4h		        
	call sub_0a10h		        
	or a			            
	jr z,l093eh		            
	call sub_0a5ah		        
	ret			                
l093eh:
	ld b,005h		            
l0940h:
	push bc			            
	ld a,(0fef3h)		        
	ld c,a			            
	ld a,001h		            
	out (c),a		            
	ld hl,0c000h		        
	ld a,088h		            
	call sub_0a65h		        
	ld a,(0fef1h)		        
	ld d,a			            
	ld a,(0fef4h)		        
	ld e,a			            
l0959h:
	ld c,d			            
l095ah:
	in a,(c)		            
	rra			                
	jr nc,l0968h		        
	rra			                
	jr nc,l095ah		        
	ld c,e			            
	ini		                
	inc b			            
	jr l0959h		            
l0968h:
	in a,(c)		            
	and 0fch		            
	jr z,l097ch		            
	pop bc			            
	djnz l0940h		            
l0971h:
	call sub_0a5ah		        
	ld hl,load_error		    
	call print_string		        
l097ah:
	jr l097ah		            
l097ch:
	pop bc			            
	call sub_0a5ah		        
	ld hl,0c000h		        
	ld a,(hl)			        
	ld c,a			            
	ld d,000h		            
	ld b,019h		            
l0989h:
	inc hl			            
	ld a,(hl)			        
	xor c			            
	jr nz,l098fh		        
	inc d			            
l098fh:
	djnz l0989h		            
	ld a,d			            
	cp 019h		                
	jp nz,0c000h		        
	ld hl,disk_no_system		    
	call print_string		        
	pop bc			            
	jp l00c2h		            
sub_09a1h:
	call sub_09eah		        
	ld a,009h		            
	call sub_0a65h		        
	call sub_09eah		        
	ld a,(0fef2h)		        
	ld c,a			            
	xor a			            
	out (c),a		            
	ret			                
sub_09b4h:
	ld c,0cfh		            
	ld b,004h		            
l09b8h:
	in a,(c)		            
	cp 010h		                
	jr z,l09c7h		            
	ld a,c			            
	add a,010h		            
	ld c,a			            
	djnz l09b8h		            
	jp l0971h		            
l09c7h:
	ld a,c			            
	sub 00fh		            
	ld b,a			            
	ld (0fef0h),a		        
	ld (0fef1h),a		        
	inc a			            
	ld (0fef2h),a		        
	inc a			            
	ld (0fef3h),a		        
	inc a			            
	ld (0fef4h),a		        
	ld a,c			            
	ld (0fef5h),a		        
	ld d,c			            
	call sub_0a73h		        
	xor a			            
	ld c,d			            
	out (c),a		            
	ret			                
sub_09eah:
	push bc			            
	ld a,(0fef1h)		        
	ld c,a			            
	ld de,0ffffh		        
l09f2h:
	in a,(c)		            
	rra			                
	jr nc,l0a00h		        
	dec de			            
	ld a,e			            
	or d			            
	jr nz,l09f2h		        
	pop bc			            
	ld a,001h		            
	ret			                
l0a00h:
	pop bc			            
	xor a			            
	ret			                
sub_0a03h:
	push bc			            
l0a04h:
	ld c,0a2h		            
l0a06h:
	dec c			            
	ld b,b			            
	ld c,c			            
	jr nz,l0a06h		        
	dec a			            
	jr nz,l0a04h		        
	pop bc			            
	ret			                
sub_0a10h:
	call sub_0a73h		        
	ld a,(0fef5h)		        
	ld c,a			            
	ld a,002h		            
	out (c),a		            
	ld b,0fah		            
	ld a,(0fef1h)		        
	ld c,a			            
l0a21h:
	ld a,002h		            
	call sub_0a03h		        
	in a,(c)		            
	bit 1,a		                
	jr nz,l0a31h		        
	djnz l0a21h		            
	ld a,001h		            
	ret			                
l0a31h:
	ld a,002h		            
	call sub_0a03h		        
	in a,(c)		            
	bit 1,a		                
	jr z,l0a41h		            
	djnz l0a31h		            
	ld a,001h		            
	ret			                
l0a41h:
	ld a,(0fef2h)		        
	ld c,a			            
	xor a			            
	out (c),a		            
	ld b,003h		            
l0a4ah:
	call sub_09eah		        
	or a			            
	ret nz			            
	ld a,049h		            
	call sub_0a65h		        
	djnz l0a4ah		            
	call sub_09a1h		        
	ret			                
sub_0a5ah:
	call sub_09eah		        
	ld a,(0fef5h)		        
	ld c,a			            
	xor a			            
	out (c),a		            
	ret			                
sub_0a65h:
	push af			            
	ld a,(0fef0h)		        
	ld c,a			            
	pop af			            
	out (c),a		            
	ld a,00eh		            
l0a6fh:
	dec a			            
	jr nz,l0a6fh		        
	ret			                
sub_0a73h:
	ld a,(0fef0h)		        
	ld c,a			            
	ld a,0d0h		            
	out (c),a		            
l0a7bh:
	ld a,010h		            
l0a7dh:
	dec a			            
	jr nz,l0a7dh		        
	ret			 
;
;
;
;	               
l0a81h:
    defb	000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 020h, 020h, 020h, 020h, 020h, 000h, 020h, 000h
    defb	000h, 050h, 050h, 050h, 000h, 000h, 000h, 000h, 050h, 050h, 0F8h, 050h, 0F8h, 050h, 050h, 000h
    defb	020h, 078h, 0A0h, 070h, 028h, 0F0h, 020h, 000h, 0C0h, 0C8h, 010h, 020h, 040h, 098h, 018h, 000h
    defb	040h, 0A0h, 0A0h, 040h, 0A8h, 090h, 068h, 000h, 000h, 020h, 020h, 020h, 000h, 000h, 000h, 000h
    defb	010h, 020h, 040h, 040h, 040h, 020h, 010h, 000h, 040h, 020h, 010h, 010h, 010h, 020h, 040h, 000h
    defb	020h, 0A8h, 070h, 020h, 070h, 0A8h, 020h, 000h, 000h, 020h, 020h, 0F8h, 020h, 020h, 000h, 000h
    defb	000h, 000h, 000h, 000h, 020h, 020h, 040h, 000h, 000h, 000h, 000h, 078h, 000h, 000h, 000h, 000h
    defb	000h, 000h, 000h, 000h, 000h, 000h, 020h, 000h, 000h, 008h, 010h, 020h, 040h, 080h, 000h, 000h
    defb	030h, 048h, 048h, 048h, 048h, 048h, 030h, 000h, 020h, 060h, 020h, 020h, 020h, 020h, 070h, 000h
    defb	030h, 048h, 008h, 030h, 040h, 040h, 078h, 000h, 078h, 008h, 010h, 030h, 008h, 048h, 030h, 000h
    defb	008h, 018h, 028h, 048h, 078h, 008h, 008h, 000h, 078h, 040h, 070h, 008h, 008h, 048h, 030h, 000h
    defb	010h, 020h, 040h, 070h, 048h, 048h, 030h, 000h, 078h, 008h, 010h, 020h, 020h, 020h, 020h, 000h
	defb	030h, 048h, 048h, 030h, 048h, 048h, 030h, 000h, 030h, 048h, 048h, 038h, 008h, 010h, 020h, 000h
	defb	000h, 000h, 020h, 000h, 020h, 000h, 000h, 000h, 000h, 000h, 020h, 000h, 020h, 020h, 040h, 000h
	defb	008h, 010h, 020h, 040h, 020h, 010h, 008h, 000h, 000h, 000h, 078h, 000h, 078h, 000h, 000h, 000h
	defb	040h, 020h, 010h, 008h, 010h, 020h, 040h, 000h, 030h, 048h, 008h, 030h, 020h, 000h, 020h, 000h
	defb	070h, 088h, 0A8h, 0B8h, 0B0h, 080h, 078h, 000h, 000h, 030h, 048h, 048h, 078h, 048h, 048h, 000h
	defb	000h, 070h, 048h, 070h, 048h, 048h, 070h, 000h, 000h, 030h, 048h, 040h, 040h, 048h, 030h, 000h
	defb	000h, 070h, 048h, 048h, 048h, 048h, 070h, 000h, 000h, 078h, 040h, 070h, 040h, 040h, 078h, 000h
	defb	000h, 078h, 040h, 070h, 040h, 040h, 040h, 000h, 000h, 030h, 048h, 040h, 058h, 048h, 030h, 000h
	defb	000h, 048h, 048h, 078h, 048h, 048h, 048h, 000h, 000h, 070h, 020h, 020h, 020h, 020h, 070h, 000h
	defb	000h, 038h, 010h, 010h, 010h, 050h, 020h, 000h, 000h, 048h, 050h, 060h, 050h, 048h, 048h, 000h
	defb	000h, 040h, 040h, 040h, 040h, 040h, 078h, 000h, 000h, 088h, 0D8h, 0A8h, 088h, 088h, 088h, 000h
	defb	000h, 048h, 048h, 068h, 058h, 048h, 048h, 000h, 000h, 030h, 048h, 048h, 048h, 048h, 030h, 000h
	defb	000h, 070h, 048h, 048h, 070h, 040h, 040h, 000h, 000h, 030h, 048h, 048h, 068h, 050h, 028h, 000h
	defb	000h, 070h, 048h, 048h, 070h, 050h, 048h, 000h, 000h, 038h, 040h, 030h, 008h, 008h, 070h, 000h
	defb	000h, 07Ch, 010h, 010h, 010h, 010h, 010h, 000h, 000h, 048h, 048h, 048h, 048h, 048h, 030h, 000h
	defb	000h, 048h, 048h, 048h, 048h, 050h, 060h, 000h, 000h, 088h, 088h, 088h, 0A8h, 0D8h, 088h, 000h
	defb	000h, 088h, 050h, 020h, 050h, 088h, 088h, 000h, 000h, 044h, 028h, 010h, 010h, 010h, 010h, 000h
	defb	000h, 078h, 008h, 010h, 020h, 040h, 078h, 000h, 078h, 040h, 040h, 040h, 040h, 040h, 078h, 000h
	defb	000h, 080h, 040h, 020h, 010h, 008h, 000h, 000h, 078h, 008h, 008h, 008h, 008h, 008h, 078h, 000h
	defb	000h, 000h, 020h, 050h, 088h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 078h
	defb	040h, 060h, 070h, 078h, 070h, 060h, 040h, 000h, 000h, 000h, 070h, 008h, 038h, 048h, 038h, 000h
	defb	040h, 040h, 070h, 048h, 048h, 048h, 070h, 000h, 000h, 000h, 038h, 040h, 040h, 040h, 038h, 000h
	defb	008h, 008h, 038h, 048h, 048h, 048h, 038h, 000h, 000h, 000h, 030h, 048h, 070h, 040h, 038h, 000h
	defb	010h, 028h, 020h, 070h, 020h, 020h, 020h, 000h, 000h, 000h, 030h, 048h, 048h, 038h, 008h, 070h
	defb	040h, 040h, 070h, 048h, 048h, 048h, 048h, 000h, 020h, 000h, 020h, 020h, 020h, 020h, 070h, 000h
	defb	010h, 000h, 010h, 010h, 010h, 010h, 050h, 020h, 040h, 040h, 048h, 050h, 060h, 050h, 048h, 000h
	defb	030h, 010h, 010h, 010h, 010h, 010h, 038h, 000h, 000h, 000h, 0D8h, 0A8h, 0A8h, 088h, 088h, 000h
	defb	000h, 000h, 070h, 048h, 048h, 048h, 048h, 000h, 000h, 000h, 030h, 048h, 048h, 048h, 030h, 000h
	defb	000h, 000h, 070h, 048h, 048h, 070h, 040h, 040h, 000h, 000h, 038h, 048h, 048h, 038h, 008h, 008h
	defb	000h, 000h, 038h, 040h, 040h, 040h, 040h, 000h, 000h, 000h, 038h, 040h, 030h, 008h, 070h, 000h
	defb	020h, 020h, 070h, 020h, 020h, 020h, 030h, 000h, 000h, 000h, 048h, 048h, 048h, 048h, 030h, 000h
	defb	000h, 000h, 048h, 048h, 048h, 050h, 060h, 000h, 000h, 000h, 088h, 088h, 0A8h, 0A8h, 0D8h, 000h
	defb	000h, 000h, 088h, 050h, 020h, 050h, 088h, 000h, 000h, 000h, 048h, 048h, 048h, 038h, 008h, 070h
	defb	000h, 000h, 078h, 010h, 020h, 040h, 078h, 000h, 018h, 020h, 010h, 060h, 010h, 020h, 018h, 000h
	defb	000h, 048h, 048h, 048h, 048h, 048h, 000h, 000h, 060h, 010h, 020h, 018h, 020h, 010h, 060h, 000h
	defb	000h, 000h, 000h, 000h, 000h, 000h, 000h, 01Ch, 0FCh, 000h, 000h, 0FCh, 0FCh, 000h, 000h, 0FCh
	defb	000h, 000h, 000h, 000h, 000h, 000h, 000h, 0E0h, 0FCh, 0FCh, 000h, 0FCh, 0FCh, 0FCh, 0FCh, 000h
	defb	0FCh, 0FCh, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0FCh, 0FCh, 03Ch, 03Ch, 01Ch, 01Ch, 00Ch, 00Ch
	defb	0FCh, 0FCh, 084h, 084h, 084h, 084h, 084h, 084h, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh
	defb	0FCh, 0FCh, 080h, 080h, 080h, 000h, 000h, 010h, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh, 07Ch, 07Ch, 07Ch
	defb	0FCh, 0FCh, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0FCh, 0FCh, 000h, 000h, 000h, 0F0h, 0FCh, 0FCh
	defb	0FCh, 0FCh, 0FCh, 03Ch, 01Ch, 01Ch, 00Ch, 00Ch, 0FCh, 0FCh, 084h, 084h, 084h, 084h, 084h, 084h
	defb	0FCh, 0FCh, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0FCh, 0FCh, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch
	defb	0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 004h, 004h, 000h, 020h, 020h, 030h, 030h, 038h
	defb	084h, 084h, 084h, 084h, 004h, 004h, 004h, 004h, 0F8h, 0F8h, 0F8h, 0F0h, 0F0h, 0F0h, 0E0h, 0E0h
	defb	010h, 010h, 038h, 038h, 038h, 000h, 000h, 000h, 03Ch, 03Ch, 03Ch, 01Ch, 01Ch, 01Ch, 00Ch, 00Ch
	defb	0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0FCh, 0F0h, 000h, 000h, 000h, 0F0h, 0FCh, 0FCh
	defb	00Ch, 01Ch, 01Ch, 03Ch, 01Ch, 01Ch, 00Ch, 00Ch, 084h, 084h, 084h, 084h, 084h, 084h, 084h, 084h
	defb	0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch, 03Ch
	defb	0F0h, 0F0h, 0F0h, 0F0h, 0F0h, 0FCh, 0FCh, 000h, 038h, 03Ch, 03Ch, 03Ch, 03Ch, 0FCh, 0FCh, 000h
	defb	004h, 004h, 004h, 084h, 084h, 0FCh, 0FCh, 000h, 0E0h, 0C0h, 0C0h, 0C0h, 0C0h, 0FCh, 0FCh, 000h
	defb	07Ch, 07Ch, 0FCh, 0FCh, 0FCh, 0FCh, 0FCh, 000h, 00Ch, 004h, 084h, 084h, 084h, 0FCh, 0FCh, 000h
	defb	0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0FCh, 0FCh, 000h, 0FCh, 0F0h, 000h, 000h, 000h, 0FCh, 0FCh, 000h
	defb	00Ch, 01Ch, 01Ch, 03Ch, 0FCh, 0FCh, 0FCh, 000h, 084h, 080h, 0C0h, 0E0h, 0F0h, 0FCh, 0FCh, 000h
	defb	0F0h, 0E0h, 000h, 000h, 004h, 0FCh, 0FCh, 000h, 03Ch, 03Ch, 07Ch, 0FCh, 0FCh, 0FCh, 0FCh, 000h
	defb	0FCh, 0FCh, 0FCh, 0FCh, 000h, 0FCh, 0FCh, 0FCh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
	defb	000h, 000h, 0FCh, 0FCh, 000h, 000h, 0FCh, 000h, 00Ch, 000h, 000h, 0FCh, 0FCh, 000h, 000h, 0FCh
	defb	0C0h, 000h, 000h, 0FCh, 0FCh, 000h, 000h, 0FCh, 01Ch, 01Ch, 000h, 07Ch
l0eddh:
	defb	07Ch, 07Ch, 07Ch, 000h
	defb	0E0h, 0E0h, 000h, 0F8h, 0F8h, 0F8h, 0F8h, 000h, 07Ch, 07Ch, 07Ch, 07Ch, 000h, 01Ch, 01Ch, 01Ch
	defb	0F8h, 0F8h, 0F8h, 0F8h, 000h, 0E0h, 0E0h, 0E0h, 000h, 000h, 0FCh, 0FCh, 000h, 000h, 00Ch, 000h
l0f01h:
	defb	000h, 000h, 0FCh, 0FCh, 000h, 000h, 0C0h, 000h 
	
;
;
;
;	                
sub_0f09h:
	push af			            
	exx			                
	xor d			            
	ld c,a			            
	ld b,000h		            
	sla c		                
	rl b		                
	ld d,e			            
	ld iy,l0f26h		        
	add iy,bc		            
	ld a,(iy+000h)		        
	ld e,a			            
	ld a,(iy+001h)		        
	xor d			            
	ld d,a			            
	exx			                
	pop af			            
l0f25h:
	ret			  
;
;
;
;	                
l0f26h:
    defb    000h, 000h, 021h, 010h, 042h, 020h, 063h, 030h, 084h, 040h, 0A5h, 050h, 0C6h, 060h, 0E7h, 070h
    defb    008h, 081h, 029h, 091h, 04Ah, 0A1h, 06Bh, 0B1h, 08Ch, 0C1h, 0ADh, 0D1h, 0CEh, 0E1h, 0EFh, 0F1h
    defb    031h, 012h, 010h, 002h, 073h, 032h, 052h, 022h, 0B5h, 052h, 094h, 042h, 0F7h, 072h, 0D6h, 062h
    defb    039h, 093h, 018h, 083h, 07Bh, 0B3h, 05Ah, 0A3h, 0BDh, 0D3h, 09Ch, 0C3h, 0FFh, 0F3h, 0DEh, 0E3h
    defb    062h, 024h, 043h, 034h, 020h, 004h, 001h, 014h, 0E6h, 064h, 0C7h, 074h, 0A4h, 044h, 085h, 054h
    defb    06Ah, 0A5h, 04Bh, 0B5h, 028h, 085h, 009h, 095h, 0EEh, 0E5h, 0CFh, 0F5h, 0ACh, 0C5h, 08Dh, 0D5h
    defb    053h, 036h, 072h, 026h, 011h, 016h, 030h, 006h, 0D7h, 076h, 0F6h, 066h, 095h, 056h, 0B4h, 046h
    defb    05Bh, 0B7h, 07Ah, 0A7h, 019h, 097h, 038h, 087h, 0DFh, 0F7h, 0FEh, 0E7h, 09Dh, 0D7h, 0BCh, 0C7h
    defb    0C4h, 048h, 0E5h, 058h, 086h, 068h, 0A7h, 078h, 040h, 008h, 061h, 018h, 002h, 028h, 023h, 038h
    defb    0CCh, 0C9h, 0EDh, 0D9h, 08Eh, 0E9h, 0AFh, 0F9h, 048h, 089h, 069h, 099h, 00Ah, 0A9h, 02Bh, 0B9h
    defb    0F5h, 05Ah, 0D4h, 04Ah, 0B7h, 07Ah, 096h, 06Ah, 071h, 01Ah, 050h, 00Ah, 033h, 03Ah, 012h, 02Ah
    defb    0FDh, 0DBh, 0DCh, 0CBh, 0BFh, 0FBh, 09Eh, 0EBh, 079h, 09Bh, 058h, 08Bh, 03Bh, 0BBh, 01Ah, 0ABh
    defb    0A6h, 06Ch, 087h, 07Ch, 0E4h, 04Ch, 0C5h, 05Ch, 022h, 02Ch, 003h, 03Ch, 060h, 00Ch, 041h, 01Ch
    defb    0AEh, 0EDh, 08Fh, 0FDh, 0ECh, 0CDh, 0CDh, 0DDh, 02Ah, 0ADh, 00Bh, 0BDh, 068h, 08Dh, 049h, 09Dh
    defb    097h, 07Eh, 0B6h, 06Eh, 0D5h, 05Eh, 0F4h, 04Eh, 013h, 03Eh, 032h, 02Eh, 051h, 01Eh, 070h, 00Eh
    defb    09Fh, 0FFh, 0BEh, 0EFh, 0DDh, 0DFh, 0FCh, 0CFh, 01Bh, 0BFh, 03Ah, 0AFh, 059h, 09Fh, 078h, 08Fh
    defb    088h, 091h, 0A9h, 081h, 0CAh, 0B1h, 0EBh, 0A1h, 00Ch, 0D1h, 02Dh, 0C1h, 04Eh, 0F1h, 06Fh, 0E1h
    defb    080h, 010h, 0A1h, 000h, 0C2h, 030h, 0E3h, 020h, 004h, 050h, 025h, 040h, 046h, 070h, 067h, 060h
    defb    0B9h, 083h, 098h, 093h, 0FBh, 0A3h, 0DAh, 0B3h, 03Dh, 0C3h, 01Ch, 0D3h, 07Fh, 0E3h, 05Eh, 0F3h
    defb    0B1h, 002h, 090h, 012h, 0F3h, 022h, 0D2h, 032h, 035h, 042h, 014h, 052h, 077h, 062h, 056h, 072h
    defb    0EAh, 0B5h, 0CBh, 0A5h, 0A8h, 095h, 089h, 085h, 06Eh, 0F5h, 04Fh, 0E5h, 02Ch, 0D5h, 00Dh, 0C5h
    defb    0E2h, 034h, 0C3h, 024h, 0A0h, 014h, 081h, 004h, 066h, 074h, 047h, 064h, 024h, 054h, 005h, 044h
    defb    0DBh, 0A7h, 0FAh, 0B7h, 099h, 087h, 0B8h, 097h, 05Fh, 0E7h, 07Eh, 0F7h, 01Dh, 0C7h, 03Ch, 0D7h
    defb    0D3h, 026h, 0F2h, 036h, 091h, 006h, 0B0h, 016h, 057h, 066h, 076h, 076h, 015h, 046h, 034h, 056h
    defb    04Ch, 0D9h, 06Dh, 0C9h, 00Eh, 0F9h, 02Fh, 0E9h, 0C8h, 099h, 0E9h, 089h, 08Ah, 0B9h, 0ABh, 0A9h
    defb    044h, 058h, 065h, 048h, 006h, 078h, 027h, 068h, 0C0h, 018h, 0E1h, 008h, 082h, 038h, 0A3h, 028h
    defb    07Dh, 0CBh, 05Ch, 0DBh, 03Fh, 0EBh, 01Eh, 0FBh, 0F9h, 08Bh, 0D8h, 09Bh, 0BBh, 0ABh, 09Ah, 0BBh
    defb    075h, 04Ah, 054h, 05Ah, 037h, 06Ah, 016h, 07Ah, 0F1h, 00Ah, 0D0h, 01Ah, 0B3h, 02Ah, 092h, 03Ah
    defb    02Eh, 0FDh, 00Fh, 0EDh, 06Ch, 0DDh, 04Dh, 0CDh, 0AAh, 0BDh, 08Bh, 0ADh, 0E8h, 09Dh, 0C9h, 08Dh
    defb    026h, 07Ch, 007h, 06Ch, 064h, 05Ch, 045h, 04Ch, 0A2h, 03Ch, 083h, 02Ch, 0E0h, 01Ch, 0C1h, 00Ch
    defb    01Fh, 0EFh, 03Eh, 0FFh, 05Dh, 0CFh, 07Ch, 0DFh, 09Bh, 0AFh, 0BAh, 0BFh, 0D9h, 08Fh, 0F8h, 09Fh
    defb    017h, 06Eh, 036h, 07Eh, 055h, 04Eh, 074h, 05Eh, 093h, 02Eh, 0B2h, 03Eh, 0D1h, 00Eh, 0F0h, 01Eh


l1126h:
	xor a			
	ld hl,0ffeeh	
	ld de,0ffefh	
	ld bc,l0009h	
	ld (hl),a		
	ldir		
	ld a,03ah	
	out (000h),a
	ld (ctrl_reg_save),a	
	ld h,00ah		
	ld c,020h		
	ld de,0e000h	
	ld b,001h		
l1143h:
	call sub_08d9h		          
	jr z,l114ch		              
	djnz l114ch		              
	jr l116eh		              
l114ch:
	call sub_1409h		          
	jr z,l1143h		              
	in a,(kbd_data)		              
	cp 031h		                
	jr z,l1164h		              
	cp 03dh		                
	jr nz,l1143h		          
	bit 0,h		                
	jr z,l1143h		              
l115fh:
	dec h			              
	jr z,l116ah		              
	jr l1143h		              
l1164h:
	bit 0,h		                
	jr nz,l1143h		          
	jr l115fh		              
l116ah:
	ld hl,0ffeeh		          
	inc (hl)			          
l116eh:
	ld a,(0fff6h)		          
	bit 0,a		                
	jr nz,l117dh		          
	call sub_13f6h		          
	out (ctrl_reg),a		          
	ld (ctrl_reg_save),a		          
l117dh:
	ld ix,01ffdh		          
	ld de,0ffffh		          
	xor a			              
	ld h,a			              
	ld l,a			              
	ld b,a			              
l1188h:
	ld c,(ix+000h)		          
	add hl,bc			          
	add ix,de		              
	jr c,l1188h		              
	ld a,(01ffeh)		          ;checksum
	cp l			              
	jr nz,l119ch		          
	ld a,(01fffh)		          ;checksum
	sub h			              
	jr z,l119fh		              
l119ch:
	call sub_13cbh		          
l119fh:
	call sub_1310h		          
	xor a			              
	out (vdp_add),a		          
	ld a,040h		              
	out (vdp_add),a		          
	xor a			              
	ld de,l0000h+1		          
	ld ix,0c000h		          
l11b1h:
	out (vdp_data),a		          
	inc a			              
	add ix,de		              
	jr nc,l11b1h		          
	ld ix,0c000h		          
	xor a			              
	ld c,a			              
	ld b,a			              
	ld h,a			              
	ld l,a			              
l11c1h:
	ld a,l			              
	out (vdp_add),a		          
	ld a,h			              
	out (vdp_add),a		          
	in a,(vdp_data)		              
	cp c			              
	jr nz,l11e4h		          
	ld a,l			              
	out (vdp_add),a		          
	ld a,h			              
	or 040h		                
	out (vdp_add),a		          
	ld a,c			              
	cpl			                
	out (vdp_data),a		          
	ld a,l			              
	out (vdp_add),a		          
	ld a,h			              
	out (vdp_add),a		          
	in a,(vdp_data)		              
	cpl			                
	cp c			              
	jr z,l11e7h		              
l11e4h:
	call sub_13cbh		          
l11e7h:
	inc c			              
	inc hl			              
	ld de,l0000h+1		          
	add ix,de		              
	jr nc,l11c1h		          
	call sub_0252h		          
	call sub_1419h		          
	call sub_1310h		          
	ld bc,08000h		          
	ld de,08200h		          
	call sub_12bdh		          
	or a			              
	jr nz,l1221h		          
	ld hl,sub_12bdh		          
	ld de,08000h		          
	ld bc,00053h		          
	ldir		                
	ld bc,l0000h		          
	ld de,08000h		          
	ld hl,l121eh		          
	push hl			              
	ld hl,08000h		          
	jp (hl)			              
l121eh:
	or a			              
	jr z,l1224h		              
l1221h:
	call sub_13cbh		          
l1224h:
	call sub_1310h		          
	ld b,010h		              
l1229h:
	ld c,000h		              
	ld a,b			              
	dec a			              
	out (sg_add),a		          
	ld a,c			              
	out (sg_data),a		          
	djnz l1229h		              
	ld c,000h		              
l1236h:
	ld b,0ffh		              
l1238h:
	ld a,c			              
	out (sg_add),a		          
	ld a,b			              
	out (sg_data),a		          
	in a,(sg_data)		              
	call sub_1252h		          
	call nz,sub_13cbh		      
	srl b		                
	jr c,l1238h		              
	inc c			              
	ld a,00eh		              
	cp c			              
	jr nz,l1236h		          
	jr l126dh		              
sub_1252h:
	ld hl,l125fh		          
	ld e,c			              
	ld d,000h		              
	add hl,de			          
	and (hl)			          
	ld e,a			              
	ld a,b			              
	and (hl)			          
	cp e			              
	ret			                
l125fh:
	rst 38h			              
	rrca			              
	rst 38h			              
	rrca			              
	rst 38h			              
	rrca			              
	rra			                
	rst 38h			              
	rra			                
	rra			                
	rra			                
	rst 38h			              
	rst 38h			              
	rrca			              
l126dh:
	call sub_1310h		          
	call init_sg		          
	ld de,l0000h		          
	ld b,005h		              
l1278h:
	ld c,020h		              
	call sub_1409h		          
	jr z,l12b4h		              
	in a,(kbd_data)		              
	cp 095h		                
	jr nc,l12b4h		          
	cp 091h		                
	jr c,l12b4h		              
	cp 094h		                
	jr z,l1290h		              
l128dh:
	call sub_13cbh		          
l1290h:
	call sub_1310h		          
	ld a,(0ffeeh)		          
	or a			              
	ret z			              
	call sub_08aeh		          
	or a			              
	jr nz,l12a1h		          
	call sub_13cbh		          
l12a1h:
	call sub_1310h		          
	call sub_08c0h		          
	srl a		                
	jr c,l12aeh		              
	call sub_13cbh		          
l12aeh:
	call sub_1310h		          
	jp l116eh		              
l12b4h:
	dec de			              
	ld a,d			              
	or e			              
	jr nz,l1278h		          
	djnz l1278h		              
	jr l128dh		              
sub_12bdh:
	push bc			              
	push de			              
	ld a,b			              
	or c			              
	jr nz,l12cah		          
	ld a,(ctrl_reg_save)		          
	set 0,a		                
	out (ctrl_reg),a		          
l12cah:
	xor a			              
	pop hl			              
	pop ix		                
	push ix		                
	push hl			              
	ld de,l0000h+1		          
l12d4h:
	ld (ix+000h),a		          
	inc a			              
	inc ix		                
	add hl,de			          
	jr nc,l12d4h		          
	xor a			              
	ld c,a			              
	pop hl			            
	pop ix		                
	push ix		                
	ld b,a			            
l12e5h:
	ld a,(ix+000h)		        
	cp c			            
	jr nz,l12ffh		        
	cpl			                
	ld (ix+000h),a		        
	ld a,(ix+000h)		        
	cpl			                
	cp c			            
	jr nz,l12ffh		        
	inc ix		                
	inc c			            
	add hl,de			          
	jr nc,l12e5h		          
	xor a			              
	jr l1301h		              
l12ffh:
	ld a,001h		              
l1301h:
	pop bc			              
	push af			              
	ld a,b			              
	or c			              
	jr nz,l130eh		          
	ld a,(ctrl_reg_save)		          
	res 0,a		                
	out (ctrl_reg),a		          
l130eh:
	pop af			              
	ret	
;
;
;
;	           
sub_1310h:
	ld c,050h		              
	ld hl,0fff6h		          
	bit 1,(hl)		              
	jr z,l131bh		              
	ld c,090h		              
l131bh:
	ld de,0cc00h		          
	call sub_05c4h		      
	res 1,(hl)		              
	ld hl,08000h		          
	ld de,l0000h+1		          
l1329h:
	add hl,de			          
	jr nc,l1329h		          
	ld a,(0ffeeh)		          
	or a			              
	jr z,l133eh		              
	ld a,(0fff7h)		          
	ld c,a			              
	sub 006h		              
	jr z,l1348h		              
	add a,007h		              
	jr l1348h		              
l133eh:
	ld a,(0fff7h)		          
	ld c,a			              
	sub 004h		              
	jr z,l1348h		              
	add a,005h		              
l1348h:
	ld (0fff7h),a		          
	ld a,(0fff6h)		          
sub_134eh:
	bit 0,a		                
	jr nz,l135ah		          
	call sub_13f6h		          
	out (ctrl_reg),a		          
	ld (ctrl_reg_save),a		          
l135ah:
	ld a,(0ffeeh)		          
	or a			           
	jr z,l139ah		           
	ld b,008h		           
	ld ix,l14efh	
l1366h:
	push bc			           
	ld l,(ix+000h)		       
	ld h,(ix+001h)		       
	inc ix		               
	inc ix		               
	call print_string		       
	pop bc			           
	djnz l1366h		           
	ld a,002h		           
	ld (0fff9h),a		       
	ld de,00028h		       
	ld b,c			           
	inc b			           
	ld hl,0012bh		       
l1384h:
	add hl,de			       
	djnz l1384h		           
	ld (0fffah),hl		       
	ld hl,0ffefh		       
	add hl,bc			       
	ld de,0fffch		       
	call sub_13b1h		     
	ld hl,0fff9h		     
	jp print_string		     
l139ah:
	ld hl,0ffefh		     
	ld b,000h		         
	add hl,bc			     
	ld a,(hl)			     
	or a			         
	ret z			         
	ld hl,rom_fail_txt_start
	ld de,00013h		     
	inc c			         
l13aah:
	dec c			         
	jp z,print_string		     
	add hl,de			     
	jr l13aah		         
sub_13b1h:
	ld a,(hl)			     
	srl a		             
	srl a		             
	srl a		             
	srl a		             
	call sub_13c1h		     
	inc de			         
	ld a,(hl)			     
	and 00fh		         
sub_13c1h:
	add a,030h		         
	cp 03ah		             
	jr c,l13c9h		         
	add a,007h		         
l13c9h:
	ld (de),a			     
	ret			             
sub_13cbh:
	push af			         
	push de			         
	push hl			         
	ld a,(0fff6h)		     
	bit 0,a		             
	jr nz,l13dfh		     
	call sub_13f6h		     
	or 010h		             
	out (ctrl_reg),a		     
	ld (ctrl_reg_save),a		     
l13dfh:
	ld a,003h		         
	ld (0fff6h),a		     
	ld hl,0ffefh		     
	ld d,000h		         
	ld a,(0fff7h)		     
	ld e,a			         
	add hl,de			     
	inc (hl)			     
	jr nz,l13f2h		     
	dec (hl)			     
l13f2h:
	pop hl			         
	pop de			         
	pop af			         
	ret			             
sub_13f6h:
	ld hl,l1402h		     
	ld a,(0fff7h)		     
	ld e,a			         
	ld d,000h		         
	add hl,de			     
	ld a,(hl)			     
	ret			             
l1402h:
	ld (bc),a			     
	ld a,(bc)			     
	ld hl,(l0222h)		     
	ld (bc),a			     
	ld (bc),a			     
sub_1409h:
	ld a,00eh		         
	out (sg_add),a		     
	ld a,c			         
	out (sg_data),a		     
	ld a,00fh		         
	out (sg_add),a		     
	in a,(sg_data)		         
	bit 0,a		             
	ret			             
sub_1419h:
	ld c,006h		         
	push bc			         
l141ch:
	call l135ah		         
	pop bc			         
	dec c			         
	jp m,l1427h		         
	push bc			         
	jr l141ch		         
l1427h:
	ld a,(0ffeeh)		     
	or a			         
	ret z			         
	ld hl,(word_1_start)	
	ld (0fff9h),hl		    
	ld a,(byte_1_start)		
	ld (0fffbh),a		    
	ld de,(l0004h)		    
	ld (0fffch),de		    
	ld hl,0fff9h		    
	jp print_string		    

; BLOCK 'rom_fail_txt' (start 0x1446 end 0x1459)
rom_fail_txt_start:
	defb 010h		               
	defb 04eh		               
	defb 001h		               
	defm	"ROM FAILURE     "


; BLOCK 'vram_fail_txt' (start 0x1459 end 0x146c)
vram_fail_txt_start:
	defb 010h		              
	defb 076h		              
	defb 001h		              
	defm 	"VRAM FAILURE    "


; BLOCK 'ram_fail_txt' (start 0x146c end 0x147f)
ram_fail_txt_start:
	defb 010h		              
	defb 09eh		              
	defb 001h		              
	defm	"RAM FAILURE     "


; BLOCK 'sound_fail_txt' (start 0x147f end 0x1492)
sound_fail_txt_start:
	defb 010h		           
	defb 0c6h		           
	defb 001h		           
	defm	"SOUND FAILURE   "


; BLOCK 'kbd_fail_txt' (start 0x1492 end 0x14a5)
kbd_fail_txt_start:
	defb 010h		             
	defb 0eeh		             
	defb 001h		             
	defm	"KEYBOARD FAILURE"


; BLOCK 'word_1' (start 0x14a5 end 0x14a7)
word_1_start:
	defw 05b02h		            
;word_1_end:

; BLOCK 'byte_1' (start 0x14a7 end 0x14a8)
byte_1_start:
	defb 003h		            


; BLOCK 'rom_txt' (start 0x14a8 end 0x14ae)
rom_txt_start:
	defb 003h		            
	defb 044h		            
	defb 001h		            
	defm	"ROM"


; BLOCK 'vram_txt' (start 0x14ae end 0x14b5)
vram_txt_start:
	defb 004h		                
	defb 06ch		                
	defb 001h		                
	defm	"VRAM"


; BLOCK 'ram_txt' (start 0x14b5 end 0x14bb)
ram_txt_start:
	defb 003h		                
	defb 094h		                
	defb 001h		                
	defm	"RAM"


; BLOCK 'sound_txt' (start 0x14bb end 0x14c3)
sound_txt_start:
	defb 005h		               
	defb 0bch		               
	defb 001h		               
	defm	"SOUND"


; BLOCK 'keyboard_txt' (start 0x14c3 end 0x14ce)
keyboard_txt_start:
	defb 008h		              
	defb 0e4h		              
	defb 001h		              
	defm	"KEYBOARD"


; BLOCK 'adapter_txt' (start 0x14ce end 0x14d8)
adapter_txt_start:
	defb 007h		               
	defb 00ch		               
	defb 002h		               
	defm	"ADAPTOR"


; BLOCK 'floppy_txt' (start 0x14d8 end 0x14e1)
floppy_txt_start:
	defb 006h		              
	defb 034h		              
	defb 002h		              
	defm	"FLOPPY"


; BLOCK 'rom_version_txt' (start 0x14e1 end 0x14ef)
rom_version_txt_start:
	defb 00bh		           
	defb 04ch		           
	defb 003h		           
	defm	"ROM VERSION"
l14efh:
	defb	0a8h 
	defb	014h 
	defb	0aeh 
	defb	014h 
	defb	0b5h 
	defb	014h 
	defb	0bbh 
	defb	014h 
	defb	0c3h 
	defb	014h 	
	defb	0ceh 
	defb	014h 
	defb	0d8h 
	defb	014h 
	defb	0e1h 
	defb	014h 	           
